  vec[var] = h.Vector()

vec['t'].record(h._ref_t)
vec['v_soma'].record(soma(0.5)._ref_v)
vec['g_edc'].record(edc._ref_g)
vec['i_edc'].record(edc._ref_i)
vec['v_edc'].record(eop(0.5)._ref_v)
#vec['z'].record(imp.transfer)

h.load_file("stdrun.hoc")
h.tstop = tstop; h.v_init = -70
h.init();        h.run()

t = array(vec['t'])
v = array(vec['v_soma'])
gedc = array(vec['g_edc'])
iedc = array(vec['i_edc'])
vedc = array(vec['v_edc'])
eedc = vedc - edc.e

figure()
subplot(2, 2, 1)
plot(t, v)
xlabel(r'$t$ / ms'); ylabel(r'$V$ / mV')
title('Voltage at soma')
subplot(2, 2, 2)
plot(t, gedc)
xlabel(r'$t$ / ms'); ylabel(r'$g$ / $\mu$S')
title('Conductance at dend[0]')
subplot(2, 2, 3)
plot(t, iedc)
xlabel(r'$t$ / ms'); ylabel(r'$I$ / nA')
title('Current passage at dend[0]')
subplot(2, 2, 4)
plot(t, eedc)
xlabel(r'$t$ / ms'); ylabel(r'$\Delta V$ / mV')
title('E.M.F. at dend[0]')
#waitforbuttonpress()
Using the instantiation of the Impedance class (imp) I can see how use the member functions imp.input() and imp.transfer() to return single values. However is there a way to `record' the changes in impedance over time in a manner that is similar to the convenient syntax for the other variables (e.g. vec['g_edc'].record(edc._ref_g) )?
Top
ted
Site Admin
Posts: 5956
Joined: Wed May 18, 2005 4:50 pm
Location: Yale University School of Medicine
Contact: Contact ted
Re: Recording changes in Impedance in NEURON (Python)
Post by ted Â» Thu Jan 24, 2013 4:52 pm

No. To quote the Programmer's Reference entry on the Vector class's record() method, "[data] Transfers [to the Vector] take place on exit from finitialize() and on exit from fadvance()." Any variable whose value is not automatically updated by finitialize() and fadvance() will simply be recorded as a stream of identical values, equal to whatever it was before run() is executed. Impedance is calculated only when Impedance class's compute() method is called, and the run control system doesn't do that for you.

That said, you can customize NEURON's standard run system by loading the following AFTER load_file("nrngui.hoc") and all statements that set up your model have been executed:
CODE: SELECT ALL

objref zvec
zvec = new Vector()

getnewz() {
  . . . statements that calculate the desired impedance value
    at the current time, and append it to zvec . . .
}

proc initzvec() {
  zvec.resize(0)
  getnewz()
}

objref fih
fih = new FInitializeHandler("initzvec()")

proc advance() {
  fadvance()
  getnewz()
}